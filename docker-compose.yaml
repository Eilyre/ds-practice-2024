version: '3'
services:
  frontend:
    build:
      # Use the current directory as the build context
      # This allows us to access the files in the current directory inside the Dockerfile
      context: ./
      dockerfile: ./frontend/Dockerfile
    ports:
      # Expose port 8080 on the host, and map port 3000 of the container to port 8080 on the host
      - "8080:3000"
    volumes:
      - /app/node_modules
    environment:
      - CHOKIDAR_USEPOLLING=true
      - WDS_SOCKET_PORT=0

  orchestrator:
    build:
      # Use the current directory as the build context
      # This allows us to access the files in the current directory inside the Dockerfile
      context: ./
      # Use the Dockerfile in the orchestrator directory
      dockerfile: ./orchestrator/Dockerfile
    ports:
      # Expose port 8081 on the host, and map port 5000 of the container to port 8081 on the host
      - 8081:5000
    environment:
      # Pass the environment variables to the container
      # The PYTHONUNBUFFERED environment variable ensures that the output from the application is logged to the console
      - PYTHONUNBUFFERED=TRUE
      # The PYTHONFILE environment variable specifies the absolute entry point of the application
      # Check app.py in the orchestrator directory to see how this is used
      - PYTHONFILE=/app/orchestrator/src/app/run.py

  fraud-detection:
    build:
      # Use the current directory as the build context
      # This allows us to access the files in the current directory inside the Dockerfile
      context: ./
      # Use the Dockerfile in the fraud_detection directorys
      dockerfile: ./fraud_detection/Dockerfile
    ports:
      # Expose port 50051 on the host, and map port 50051 of the container to port 50051 on the host
      - 50051:50051
    environment:
      # Pass the environment variables to the container
      # The PYTHONUNBUFFERED environment variable ensures that the output from the application is logged to the console
      - PYTHONUNBUFFERED=TRUE
      # The PYTHONFILE environment variable specifies the absolute entry point of the application
      # Check app.py in the fraud_detection directory to see how this is used
      - PYTHONFILE=/app/fraud_detection/src/app.py

  transaction-verification:
    build:
      context: ./
      dockerfile: ./transaction_verification/Dockerfile
    ports:
      - "50052:50052"
    environment:
      - PYTHONUNBUFFERED=TRUE
      - PYTHONFILE=/app/transaction_verification/src/run.py

  suggestions-service:
    build:
      context: ./
      dockerfile: ./suggestions_service/Dockerfile
    ports:
      - "50053:50053"
    environment:
      - PYTHONUNBUFFERED=TRUE
      - PYTHONFILE=/app/transaction_verification/src/run.py

  database:
    build:
      context: ./
      dockerfile: ./database/Dockerfile
    ports:
      - "50060:50060"
    environment:
      - NODE_ID=database
      - PEERS=raft_node_2:50060,raft_node_3:50060

  raft_node_2:
    build:
      context: ./
      dockerfile: ./database/Dockerfile
    ports:
      - "50061:50060"
    environment:
      - NODE_ID=raft_node_2
      - PEERS=database:50060,raft_node_3:50060

  raft_node_3:
    build:
      context: ./
      dockerfile: ./database/Dockerfile
    ports:
      - "50062:50060"
    environment:
      - NODE_ID=raft_node_3
      - PEERS=database:50060,raft_node_2:50060

  queue:
    build:
      context: ./
      dockerfile: ./queue/Dockerfile
    ports:
      - "50055:50055"
    environment:
      - PYTHONUNBUFFERED=TRUE
      - PYTHONFILE=/app/queue/src/run.py

  executor:
    build:
      context: ./
      dockerfile: ./executor/Dockerfile
    deploy:
      replicas: 2
    environment:
      - PYTHONUNBUFFERED=TRUE
      - PYTHONFILE=/app/executor/src/run.py

  payment-service:
    build:
      context: ./
      dockerfile: ./payment_service/Dockerfile
    ports:
      - 50056:50056
    environment:
      # Pass the environment variables to the container
      - PYTHONUNBUFFERED=TRUE
      # The PYTHONFILE environment variable specifies the absolute entry point of the application
      # Check app.py in the orchestrator directory to see how this is used
      - PYTHONFILE=/app/payment_service/src/app/run.py
